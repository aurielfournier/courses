flight1 <- matrix(1,1,2,3)
flight2 <- matrix(b,a,c,d)
flight2 <- matrix('b','a','c','d')
dates<-apply(dates,2, as.numeric) ##this is to make sure they came in as a numeric not as a character or factor
varmonth<-cbind(c(1:12),c(0,31,59,90,120,151,181,212,243,273,304,334))
dates<-apply(dates,2, as.numeric) ##this is to make sure they came in as a numeric not as a character or factor
varmonth<-cbind(c(1:12),c(0,31,59,90,120,151,181,212,243,273,304,334))
juldates<-data.frame(date=as.numeric())
for(i in 1:nrow(dates)) {juldates[i,1]<-varmonth[which(dates[i,1]==varmonth[,1]),2]+dates[i,2]
}
juldates ##heres your new numbers
library("moveud", lib.loc="C:/Program Files/R/R-3.0.2/library")
install.packages("move")
install.packages("BBMM")
install.packages("maptools")
install.packages("PBSmapping")
fishSurvival.Bayes = function() {
fishSurvival.Bayes = function() {
# assign data values
y=c(15,11,12,5,12)
lambda=50
a=1
b=1
# model specification in WinBUGS
modelFilename = 'fishSurvival.txt'
cat('
model {
phi ~ dbeta(a,b)
for (i in 1:n) {
N[i] ~ dpois(lambda)
y[i] ~ dbin(phi, N[i])
}
}
}
', fill=TRUE, file=modelFilename)
# arguments for bugs()
data = list(n=length(y), y=y, lambda=lambda, a=a, b=b)
params = list('phi','N')
inits = function() {
phi = rbeta(1,a,b)
N = rpois(length(y),lambda)
list(phi=phi, N=N)
}
# call to bugs()
library(R2WinBUGS)
fit = bugs(data, inits, params, model.file=modelFilename,
n.chains=1, n.iter=100000, n.burnin=50000, n.thin=5,  bugs.seed=sample(1:9999,size=1), debug=FALSE, DIC=FALSE)
phiPosterior = fit$sims.matrix[,'phi']
summary(phiPosterior)
}
}
fishSurvival.Bayes = function() {
# assign data values
y=c(15,11,12,5,12)
lambda=50
a=1
b=1
# model specification in WinBUGS
modelFilename = 'fishSurvival.txt'
cat('
model {
phi ~ dbeta(a,b)
for (i in 1:n) {
N[i] ~ dpois(lambda)
y[i] ~ dbin(phi, N[i])
}
}
}
', fill=TRUE, file=modelFilename)
# arguments for bugs()
data = list(n=length(y), y=y, lambda=lambda, a=a, b=b)
params = list('phi','N')
inits = function() {
phi = rbeta(1,a,b)
N = rpois(length(y),lambda)
list(phi=phi, N=N)
}
# call to bugs()
library(R2WinBUGS)
fit = bugs(data, inits, params, model.file=modelFilename,
n.chains=1, n.iter=100000, n.burnin=50000, n.thin=5,  bugs.seed=sample(1:9999,size=1), debug=FALSE, DIC=FALSE)
phiPosterior = fit$sims.matrix[,'phi']
summary(phiPosterior)
}
fishSurvival.Bayes
summary(phiPosterior)
fishSurvival.Bayes = function() {
setwd("C:/Users/Auriel Fournier/Dropbox/R/Distance")
setwd("C:/Users/avanderlaar/Dropbox/R/Biometry_HW_2")
fish
fish <- read.csv('Biometry_HW_2.csv', header=TRUE)
fish
head(fish)
Boston = fish[which(fish$STREAMTYPE=='1')]
Boston = fish[fish$STREAMTYPE=='1']
Boston = fish[fish$STREAMTYPE=='1',]
head(Bostom)
head(Boston)
Ozark = fish[fish$STREAMTYPE=='2',]
nrow(ozark)
Ozark = fish[fish$STREAMTYPE=='2',]
ozark <- lm(V72 ~  SEASNUM, data=Ozark)
head(Ozark)
fish[,72] = fish$V71^(1/4)
fish[,71] = sqrt(fish$TOTDENVOL)
fish[,72] = fish$V71^(1/4)
Ozark = fish[fish$STREAMTYPE=='2',]
ozark <- lm(V72 ~  SEASNUM, data=Ozark)
ozark.df <- data.frame(M1_Fit = seq(0,0, length=77),
M1_Resid = seq(0,0, length=77),
Season = seq(0,0, length=77))
ozark.resid = resid(ozark)
ozark.fitted = fitted(ozark)
ozark.df$M1_Fit = ozark.fitted
ozark.df$M1_Resid = ozark.resid
ozark.df$Season = ozark$SEASNUM
Boston = fish[fish$STREAMTYPE=='1',]
boston <- lm(V72 ~  SEASNUM, data=Boston)
boston.df <- data.frame(M1_Fit = seq(0,0, length=73),
M1_Resid = seq(0,0, length=73),
Season = seq(0,0, length=73))
boston.resid = resid(boston)
boston.fitted = fitted(boston)
boston.df$M1_Fit = boston.fitted
boston.df$M1_Resid = boston.resid
boston.df$Season = boston$SEASNUM
head(boston.df)
boston.df <- data.frame(M1_Fit = seq(0,0, length=73),
M1_Resid = seq(0,0, length=73),
Season = seq(0,0, length=73))
boston.df
head(boston)
boston.df$Season = Boston$SEASNUM
boston.df
Fall = fish[fish$SEASNUM=='1',]
fall <- lm(V72 ~  STREAMTYPE, data=Fall)
head(Fall)
fish$SEASNUM
Fall = fish[fish$SEASNUM=='4',]
fall <- lm(V72 ~  STREAMTYPE, data=Fall)
bostonanova <- aov(V72 ~  SEASNUM, data=Boston)
posthoc <- TukeyHSD(x=bostonanova, SEASNUM, conf.level=0.95)
bostonanova <- aov(V72 ~  SEASNUM, data=Boston)
posthoc <- TukeyHSD(x=bostonanova, Boston$SEASNUM, conf.level=0.95)
TukeyHSD(x=bostonanova, Boston$SEASNUM, conf.level=0.95)
bostonanova
TukeyHSD(x=boston, Boston$SEASNUM, conf.level=0.95)
TukeyHSD(x=bostonanova, Boston$SEASNUM, conf.level=0.95)
?TukeyHSD
TukeyHSD(x=bostonanova, as.factor(Boston$SEASNUM), conf.level=0.95)
head(Boston)
Boston[,3]
Boston[,3] = factor(Boston$SEASNUM)
bostonanova <- aov(V72 ~  SEASNUM, data=Boston)
TukeyHSD(x=bostonanova, Boston$SEASNUM, conf.level=0.95)
bostonanova <- aov(Boston$V72 ~ Boston$SEASNUM)
TukeyHSD(x=bostonanova, Boston$SEASNUM, conf.level=0.95)
warning()
TukeyHSD(x=bostonanova, Boston$SEASNUM, conf.level=0.95)
warnings()
TukeyHSD(x=bostonanova, conf.level=0.95)
TukBoston = TukeyHSD(x=bostonanova, conf.level=0.95)
`r sjt.df(TukBoston, alternateRowColors=TRUE,  no.output=TRUE, describe=FALSE)$knitr`
sjt.df(TukBoston, alternateRowColors=TRUE,  no.output=TRUE, describe=FALSE)
library(sjPlot)
sjt.df(TukBoston, alternateRowColors=TRUE,  no.output=TRUE, describe=FALSE)
class(TukBoston)
as.data.frame(TukBoston
)
write.csv(TukBoston, "TukBoston.csv")
head(fish)
fish[,6] = factor(fish$STREAMTYPE)
streamanova <- aov(fish$V72 ~ fish$STREAMTYPE)
TukStream = TukeyHSD(x=streamanova, conf.level=0.95)
TukStream
Late = fish[fish$SEASNUM=='8',]
late <- lm(V72 ~  SEASNUM, data=Late)
late
early
Early = fish[fish$SEASNUM=='6',]
early <- lm(V72 ~  STREAMTYPE, data=Early)
early
Late
